set(SENSEI_VERSION "@SENSEI_VERSION@")
set(SENSEI_VERSION_MAJOR "@SENSEI_VERSION_MAJOR@")
set(SENSEI_VERSION_MINOR "@SENSEI_VERSION_MINOR@")
set(SENSEI_VERSION_PATCH "@SENSEI_VERSION_PATCH@")
set(SENSEI_VERSION_DEVEL "@SENSEI_VERSION_DEVEL@")

include(CMakeFindDependencyMacro)

if (NOT SENSEI_DIR)
  # NOTE: this is for the ECP spack based regression testing.
  set(SENSEI_DIR "${CMAKE_CURRENT_LIST_DIR}/../../")
endif ()

set(SENSEI_LIBDIR "${CMAKE_CURRENT_LIST_DIR}/../../@CMAKE_INSTALL_LIBDIR@")

list(APPEND CMAKE_MODULE_PATH "${SENSEI_DIR}")

list(APPEND CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/svtk-9.0")
find_package(svtk REQUIRED)

list(APPEND CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/../hamr")
find_package(hamr REQUIRED)

set(SENSEI_LIB_TYPE STATIC)
if (@BUILD_SHARED_LIBS@)
  set(SENSEI_LIB_TYPE SHARED)
endif()

if (@BUILD_STATIC_EXECS@)
  set(BUILD_SHARED_LIBS OFF FORCE)
  set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
  set(LINK_SEARCH_START_STATIC TRUE)
  set(LINK_SEARCH_END_STATIC TRUE)
endif()

set(SENSEI_ENABLE_SENSEI @SENSEI_ENABLE_SENSEI@)
set(SENSEI_ENABLE_PYTHON @SENSEI_ENABLE_PYTHON@)
set(SENSEI_ENABLE_CATALYST @SENSEI_ENABLE_CATALYST@)
set(ENABLE_CATALYST2 @ENABLE_CATALYST2@)
set(SENSEI_ENABLE_CATALYST_PYTHON @SENSEI_ENABLE_CATALYST_PYTHON@)
set(SENSEI_ENABLE_LIBSIM @SENSEI_ENABLE_LIBSIM@)
set(SENSEI_ENABLE_ADIOS1 @SENSEI_ENABLE_ADIOS1@)
set(SENSEI_ENABLE_ADIOS2 @SENSEI_ENABLE_ADIOS2@)
set(SENSEI_ENABLE_HDF5 @SENSEI_ENABLE_HDF5@)
set(SENSEI_ENABLE_CONDUIT @SENSEI_ENABLE_CONDUIT@)
set(SENSEI_ENABLE_VTK_CORE @SENSEI_ENABLE_VTK_CORE@)
set(SENSEI_ENABLE_VTK_ACCELERATORS @SENSEI_ENABLE_VTK_ACCELERATORS@)
set(SENSEI_ENABLE_VTK_MPI @SENSEI_ENABLE_VTK_MPI@)
set(SENSEI_ENABLE_VTK_IO @SENSEI_ENABLE_VTK_IO@)
set(SENSEI_ENABLE_VTKM @SENSEI_ENABLE_VTKM@)
set(SENSEI_ENABLE_VTKM_RENDERING @SENSEI_ENABLE_VTKM_RENDERING@)
set(SENSEI_ENABLE_ASCENT @SENSEI_ENABLE_ASCENT@)
set(SENSEI_ENABLE_OSPRAY @SENSEI_ENABLE_OSPRAY@)

include(thread)
include(sMPI)
include(sSVTK)
include(pugixml)
include(sDIY)

if (SENSEI_ENABLE_CATALYST)
  if (NOT ParaView_DIR)
    set(ParaView_DIR "@ParaView_DIR@")
  endif()
  find_dependency(ParaView)
elseif (SENSEI_ENABLE_VTK_CORE)
  if (NOT VTK_DIR)
    set(VTK_DIR "@VTK_DIR@")
  endif()
  find_dependency(VTK)
endif()

if (ENABLE_CATALYST2)
  if (NOT VTK_DIR)
    set(VTK_DIR "@VTK_DIR@")
  endif()
  find_dependency(VTK VTK::IOCatalystConduit)
  include(sCatalyst2)
endif()

if (SENSEI_ENABLE_VTK_CORE)
  include(sVTK)
endif ()

if (SENSEI_ENABLE_VTKM)
  include(sVTKm)
endif()

if (SENSEI_ENABLE_LIBSIM)
  include(sLibsim)
endif()

if (SENSEI_ENABLE_ADIOS1)
  include(sADIOS1)
endif()

if (SENSEI_ENABLE_ADIOS2)
  if(NOT ADIOS2_DIR)
    set(ADIOS2_DIR "@ADIOS2_DIR@")
  endif()
  find_dependency(ADIOS2)
  include(sADIOS2)
endif()

if (SENSEI_ENABLE_HDF5)
  include(sHDF5)
endif()

if (SENSEI_ENABLE_CONDUIT)
  if(NOT CONDUIT_DIR)
    set(CONDUIT_DIR "@CONDUIT_DIR@")
  endif()
  find_dependency(Conduit NO_DEFAULT_PATH PATHS ${CONDUIT_DIR})
  include(sConduit)
endif()

if(SENSEI_ENABLE_ASCENT)
  if(NOT ASCENT_DIR)
    set(ASCENT_DIR "@ASCENT_DIR@")
  endif()
  find_dependency(Ascent NO_DEFAULT_PATH PATHS ${ASCENT_DIR})
  include(sAscent)
endif()

include(senseiCore)

if (SENSEI_ENABLE_PYTHON)
  set(SENSEI_PYTHON_SITE "${CMAKE_CURRENT_LIST_DIR}/../../../@SENSEI_PYTHON_SITE@")
  set(SENSEI_PYTHON_DIR "${CMAKE_CURRENT_LIST_DIR}/../../../@SENSEI_PYTHON_DIR@")

  include(sPython)

  add_library(sPythonAnalysis SHARED IMPORTED)
  set_property(TARGET sPythonAnalysis
    PROPERTY IMPORTED_LOCATION
    "${SENSEI_PYTHON_DIR}/_PythonAnalysis.so")
  if (APPLE)
    set_property(TARGET sPythonAnalysis
    PROPERTY IMPORTED_SONAME "@rpath/_PythonAnalysis.so")
  endif()
  add_dependencies(sPythonAnalysis PythonAnalysis)

endif()

include(sensei)
